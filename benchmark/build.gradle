apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.benchmark'

configurations { natives }
dependencies {
    androidTestImplementation project(":library")
    androidTestImplementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    androidTestImplementation "androidx.benchmark:benchmark-junit4:$benchmarkVersion"
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
}

//noinspection GroovyAssignabilityCheck
android {
    testOptions.unitTests.includeAndroidResources = true
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        androidTest {
            manifest.srcFile 'test/AndroidManifest.xml'
            java.srcDirs = ['test']
        }
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        testInstrumentationRunner "androidx.benchmark.junit4.AndroidBenchmarkRunner"
        testInstrumentationRunnerArgument 'androidx.benchmark.suppressErrors', 'EMULATOR,LOW_BATTERY'
        testInstrumentationRunnerArgument 'androidx.benchmark.output.enable', 'true'
        testInstrumentationRunnerArgument 'additionalTestOutputDir', '/storage/emulated/0/Download/libgdx-oboe'
    }
    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'benchmark-proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

task copyBenchmarkData(type: Exec) {
    commandLine 'adb', 'pull', '/storage/emulated/0/Download/libgdx-oboe', "${project.buildDir}/benchmark/"
}

task run {
    dependsOn(connectedCheck)
    dependsOn(copyBenchmarkData)
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}
